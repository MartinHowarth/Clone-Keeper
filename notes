Graphics:
Each entity has sprite sheet:
    one row for each state
    variable length rows - would need to assign length in the .json for each obj
    column = frame
Entity is created without graphics, but with a graphics setting dict
    post custom pygame event saying "please create graphics for me"
    graphics handler picks up event, create graphics and assigns it to the obj
    ...
    state changes -> post state change graphics event
    enters/leave drawable screen -> post enable/disable graphics event
    -> graphics thread *only* draws a given list (w/ layers), no logic

Each entity has .json that describes it - no hardcoded settings?
    graphics dict within this:
        spritesheet file name/location
        possible graphical states, with row number and # of columns
        frame dimensions - aim for standard size, but doesn't really matter - scale on load
    AI?!?!


Inter-object chat:
objects post to blogs depending on the service they provide
    e.g. a logistic supplier blog
Whenever something important happens to them, post a update to the relevant blog
    e.g. logistic supplier changes location
Other objects can subscribe to blogs to receive updates.
    e.g. logistic requester wants to know where all the suppliers are (but don't go into detail of how much is available)
This is best for small(?) numbers of objects posting infrequent updates.
Probably not a good idea for large scale interactions (such as find closest ANYTHING)

Logistic system:
Copy of factorio's system, but with improved distribution to local storage centres
Inherit from inventory
    requester inventory
    provider inventory (active/passive)
    storage inventory (universal acceptor, active providers give all to closest available storage)
    carrier inventory (necessary?)


On load:
make list of item ID's

TODO:
Add reserved item slots to inventory
